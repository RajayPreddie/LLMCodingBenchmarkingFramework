{
    "identifier": "concatenated_words",
    "prompts": [
        {
            "prompt_id": "32",
            "prompt": "Given a list of words (without duplicates), please write a program that returns all concatenated words in the given list of words. A concatenated word is defined as a string that is comprised entirely of at least two shorter words in the given array.",
            "sample_inputs_outputs": [
                {
                    "input": {
                        "words": "[\"cat\",\"cats\",\"catsdogcats\",\"dog\",\"dogcatsdog\",\"hippopotamuses\",\"rat\",\"ratcatsdogcat\"]"
                    },
                    "expected_output": [
                        "[\"catsdogcats\",\"dogcatsdog\",\"ratcatsdogcat\"]"
                    ]
                }
            ]
        }
    ],
    "function_prototype": {
        "function_name": "find_all_concatenated_words",
        "parameters": [
            {
                "name": "words",
                "type": "List[str]"
            }
        ],
        "return_values": [
            {
                "type": "List[str]"
            }
        ]
    },
    "correctness_test_suite": [
        {
            "input": {
                "words": "[\"cat\",\"cats\",\"catsdogcats\",\"dog\",\"dogcatsdog\",\"hippopotamuses\",\"rat\",\"ratcatsdogcat\"]"
            },
            "expected_output": [
                "[\"catsdogcats\",\"dogcatsdog\",\"ratcatsdogcat\"]"
            ]
        },
        {
            "input": {
                "words": "[\"a\",\"b\",\"ab\",\"abc\"]"
            },
            "expected_output": [
                "[\"ab\"]"
            ]
        },
        {
            "input": {
                "words": "[\"a\",\"aa\",\"aaa\"]"
            },
            "expected_output": [
                "[\"aaa\"]"
            ]
        }
    ],
    "optimal_solution": "def find_all_concatenated_words(words: list[str]) -> list[str]:\n    word_set, res = set(words), []\n\n    def can_form(word):\n        if word in word_set:\n            return True\n        for i in range(1, len(word)):\n            prefix, suffix = word[:i], word[i:]\n            if prefix in word_set and can_form(suffix):\n                return True\n        return False\n\n    for word in words:\n        word_set.remove(word)\n        if can_form(word):\n            res.append(word)\n        word_set.add(word)\n\n    return res"
}