{
    "identifier": "course_schedule",
    "prompts": [
        {
            "prompt_id": "34",
            "prompt": "There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai. Return true if you can finish all courses. Otherwise, return false.",
            "sample_inputs_outputs": [
                {
                    "input": {
                        "numCourses": "2",
                        "prerequisites": "[[1,0]]"
                    },
                    "expected_output": [
                        "True"
                    ]
                }
            ]
        }
    ],
    "function_prototype": {
        "function_name": "can_finish",
        "parameters": [
            {
                "name": "numCourses",
                "type": "int"
            },
            {
                "name": "prerequisites",
                "type": "List[List[int]]"
            }
        ],
        "return_values": [
            {
                "type": "bool"
            }
        ]
    },
    "correctness_test_suite": [
        {
            "input": {
                "numCourses": "2",
                "prerequisites": "[[1,0]]"
            },
            "expected_output": [
                "True"
            ]
        },
        {
            "input": {
                "numCourses": "2",
                "prerequisites": "[[1,0],[0,1]]"
            },
            "expected_output": [
                "False"
            ]
        }
    ],
    "optimal_solution": "def can_finish(numCourses: int, prerequisites: list[list[int]]) -> bool:\n    graph = [[] for _ in range(numCourses)]\n    visit = [0 for _ in range(numCourses)]\n    for x, y in prerequisites:\n        graph[x].append(y)\n    def dfs(i):\n        if visit[i] == -1:\n            return True\n        if visit[i] == 1:\n            return False\n        visit[i] = -1\n        for j in graph[i]:\n            if not dfs(j):\n                return False\n        visit[i] = 1\n        return True\n    for i in range(numCourses):\n        if not dfs(i):\n            return False\n    return True"
}