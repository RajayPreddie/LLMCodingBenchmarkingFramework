{
    "problem_identifier": "clone_graph",
    "model_identifier": "gpt-4",
    "prompt_identifier": "51",
    "solution_code": "# Definition for a Node.\nclass Node:\n    def __init__(self, val = 0, neighbors = None):\n        self.val = val\n        self.neighbors = neighbors if neighbors is not None else []\n\ndef clone_graph(node):\n    if not node:\n        return node\n    # Using a dictionary to save the visited node and it's respective clone as a key-value pair.\n    def clone(node):\n        if node in visited:\n            return visited[node]\n        clone_node = Node(node.val, [])\n        visited[node] = clone_node\n        if node.neighbors:\n            clone_node.neighbors = [clone(n) for n in node.neighbors]\n        return clone_node\n\n    visited = {}\n    return clone(node)",
    "feedback": null
}