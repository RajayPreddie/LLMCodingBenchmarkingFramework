{
    "identifier": "group_shifted_strings",
    "prompts": [
        {
            "prompt_id": "32",
            "prompt": "Given a list of non-empty strings which contains only lowercase alphabets, group all strings that belong to the same shifting sequence.",
            "sample_inputs_outputs": [
                {
                    "input": {
                        "strings": "[\"abc\", \"bcd\", \"acef\", \"xyz\", \"az\", \"ba\", \"a\", \"z\"]"
                    },
                    "expected_output": [
                        "[\"abc\",\"bcd\",\"xyz\"],[\"acef\"],[\"a\"],[\"az\",\"ba\"],[\"z\"]"
                    ]
                }
            ]
        }
    ],
    "function_prototype": {
        "function_name": "group_strings",
        "parameters": [
            {
                "name": "strings",
                "type": "List[str]"
            }
        ],
        "return_values": [
            {
                "type": "List[List[str]]"
            }
        ]
    },
    "correctness_test_suite": [
        {
            "input": {
                "strings": "[\"abc\", \"bcd\", \"acef\", \"xyz\", \"az\", \"ba\", \"a\", \"z\"]"
            },
            "expected_output": [
                "[\"abc\",\"bcd\",\"xyz\"],[\"acef\"],[\"a\"],[\"az\",\"ba\"],[\"z\"]"
            ]
        },
        {
            "input": {
                "strings": "[\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"]"
            },
            "expected_output": [
                "[\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\"]"
            ]
        },
        {
            "input": {
                "strings": "[\"abc\", \"def\"]"
            },
            "expected_output": [
                "[\"abc\",\"def\"]"
            ]
        }
    ],
    "optimal_solution": "def group_strings(strings: list[str]) -> list[list[str]]:\n    def get_diff(s):\n        return ''.join([chr((ord(s[i]) - ord(s[i-1])) % 26) for i in range(1, len(s))])\n    \n    d = {}\n    for s in strings:\n        key = get_diff(s)\n        if key in d:\n            d[key].append(s)\n        else:\n            d[key] = [s]\n    \n    return [sorted(v) for v in d.values()]"
}