{
    "problem_identifier": "serialize_deserialize_tree",
    "model_identifier": "gpt-4",
    "prompt_identifier": "37",
    "solution_code": "class Codec:\n\n    def serialize(self, root):\n        \"\"\" Encodes a tree to a single string.\n        \n        :type root: TreeNode\n        :rtype: str\n        \"\"\"\n        def dfs(node):\n            if node:\n                vals.append(str(node.val))\n                dfs(node.left)\n                dfs(node.right)\n            else:\n                vals.append('#')\n        \n        vals = []\n        dfs(root)\n        return ' '.join(vals)\n\n    def deserialize(self, data):\n        \"\"\" Decodes your encoded data to tree.\n        \n        :type data: str\n        :rtype: TreeNode\n        \"\"\"\n        def dfs():\n            val = next(vals)\n            if val == '#':\n                return None\n            node = TreeNode(int(val))\n            node.left = dfs()\n            node.right = dfs()\n            return node\n        \n        def data_to_iter(data):\n            for val in data.split():\n                yield val\n        vals = data_to_iter(data)\n        return dfs()",
    "feedback": null
}