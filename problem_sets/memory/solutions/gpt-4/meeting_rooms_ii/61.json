{
    "problem_identifier": "meeting_rooms_ii",
    "model_identifier": "gpt-4",
    "prompt_identifier": "61",
    "solution_code": "import heapq\nfrom typing import List\n\ndef min_meeting_rooms(intervals: List[List[int]]) -> int:\n    if not intervals:\n        return 0\n    \n    # use a heap to store all ongoing meetings, sorted by their end time\n    heap = []\n    \n    # sort the intervals by start time\n    intervals.sort(key=lambda x: x[0])\n    \n    # add the first meeting\n    heapq.heappush(heap, intervals[0][1])\n    \n    # iterate over the remaining intervals\n    for i in range(1, len(intervals)):\n        # if the earliest end time is before or at the same time as the current interval's start time,\n        # we can use the same room, so we pop it off the heap\n        if heap[0] <= intervals[i][0]:\n            heapq.heappop(heap)\n        # add the current interval's end time to the heap\n        heapq.heappush(heap, intervals[i][1])\n        \n    # the size of the heap is the amount of rooms we need\n    return len(heap)",
    "feedback": null
}