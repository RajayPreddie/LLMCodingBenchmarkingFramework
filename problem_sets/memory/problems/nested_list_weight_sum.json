{
    "identifier": "nested_list_weight_sum",
    "prompts": [
        {
            "prompt_id": "41",
            "prompt": "Given a nested list of integers, return the sum of all integers in the list weighted by their depth. Each element is either an integer, or a list -- whose elements may also be integers or other lists.",
            "sample_inputs_outputs": [
                {
                    "input": {
                        "nested_list": "[1,[4,[6]]]"
                    },
                    "expected_output": [
                        "27"
                    ]
                }
            ]
        }
    ],
    "function_prototype": {
        "function_name": "depth_sum",
        "parameters": [
            {
                "name": "nested_list",
                "type": "List[NestedInteger]"
            }
        ],
        "return_values": [
            {
                "type": "int"
            }
        ]
    },
    "correctness_test_suite": [
        {
            "input": {
                "nested_list": "[1,[4,[6]]]"
            },
            "expected_output": [
                "27"
            ]
        },
        {
            "input": {
                "nested_list": "[1,2,3,[4,5]]"
            },
            "expected_output": [
                "26"
            ]
        }
    ],
    "optimal_solution": "def depth_sum(nested_list: List[NestedInteger]) -> int:\n    def helper(nlist, depth):\n        total = 0\n        for item in nlist:\n            if isinstance(item, int):\n                total += item * depth\n            else:\n                total += helper(item, depth+1)\n        return total\n    \n    return helper(nested_list, 1)"
}